<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Open-Source | Siyelo]]></title>
  <link href="http://blog.siyelo.com/categories/open-source/atom.xml" rel="self"/>
  <link href="http://blog.siyelo.com/"/>
  <updated>2013-11-19T12:28:11+01:00</updated>
  <id>http://blog.siyelo.com/</id>
  <author>
    <name><![CDATA[Siyelo]]></name>
    <email><![CDATA[support@siyelo.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Scratching an itch]]></title>
    <link href="http://blog.siyelo.com/scratching-an-itch"/>
    <updated>2012-09-07T18:00:00+02:00</updated>
    <id>http://blog.siyelo.com/scratching-an-itch</id>
    <content type="html"><![CDATA[<p><a href="https://rubygems.org/gems/should_clean">ShouldClean</a> is a tool to help us convert RSpec test descriptions from a pile of should (it 'should do this...', it 'should do that...') into a cleaner and simpler imperative style (it 'does this...', it 'does that...').  </p>

<p>The gem works by running through a specified directory and changing the offending descriptions within any spec files it finds. ShouldClean will remove the word 'should' and will conjugate the verb to its singular 3rd person, present indicative form (huh?). For example: </p>

<p><code>ruby
it "should be true"          #=&gt; it "is true"
it "should action something" #=&gt; it "actions something"
it "should push something"   #=&gt; it "pushes something"
it "should by default be 1"  #=&gt; it "by default is 1"
</code></p>

<p>Are a few extra 'shoulds' really that big of deal? Probably not - it really boils down to a matter of preference.  For us, running this tool on projects with large test suites helps:</p>

<ol>
<li>make the tests more readable;</li>
<li>it reduces unneccessary duplication in the spec files and the test output;</li>
<li>An added benefit is that the test suite has a mood of certainty about it - reading the tests tells you what the code does, not what it should do when everything falls into place. </li>
</ol>


<p>ShouldClean is just a simple, fun project we undertook to make the code we look at everyday, slightly better.  Hopefully you can find a use for it too - remember, pull requests are always welcome (<a href="http://www.github.com/siyelo/should_clean">http://www.github.com/siyelo/should_clean</a>).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Handy rake tasks for Heroku]]></title>
    <link href="http://blog.siyelo.com/handy-rake-tasks-for-heroku"/>
    <updated>2010-06-18T10:42:07+02:00</updated>
    <id>http://blog.siyelo.com/handy-rake-tasks-for-heroku</id>
    <content type="html"><![CDATA[<p>Theres some great gists and blogposts floating around there showing you how to generate .gems, but who wants to manage individual rake tasks across projects? Not me. A little bit of hunting and I found a nice plugin ‘heroku_san’ by Elijah Miller with several cool Heroku rake tasks, including one to generate the .gems file. </p>

<p>Plugins are pants though, so I've updated heroku_san to a gem now too. No more copying .rake tasks between projects!</p>

<p>Grab <a href="http://github.com/glennr/heroku_san">http://github.com/glennr/heroku_san</a> and <code>rake heroku:gems</code> til your hearts' content!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GitHub gem: A JSON text must at least contain two octets! (JSON::ParserError)]]></title>
    <link href="http://blog.siyelo.com/github-gem-a-json-text-must-at-least-contain-two-octets-jsonparsererror"/>
    <updated>2010-06-07T23:25:00+02:00</updated>
    <id>http://blog.siyelo.com/github-gem-a-json-text-must-at-least-contain-two-octets-jsonparsererror</id>
    <content type="html"><![CDATA[<p>Seems like GitHub is not returning correct JSON for the <code>http://github.com/#{user}/#{project}/network_meta</code> endpoint.</p>

<p>Fork our fix here:</p>

<p><a href="http://github.com/glennr/github-gem">http://github.com/glennr/github-gem</a></p>
]]></content>
  </entry>
  
</feed>
