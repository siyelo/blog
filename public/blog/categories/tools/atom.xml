<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Tools | Siyelo]]></title>
  <link href="http://blog.siyelo.com/blog/categories/tools/atom.xml" rel="self"/>
  <link href="http://blog.siyelo.com/"/>
  <updated>2013-05-03T15:37:36+02:00</updated>
  <id>http://blog.siyelo.com/</id>
  <author>
    <name><![CDATA[Siyelo]]></name>
    <email><![CDATA[support@siyelo.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rails Deployment Audit]]></title>
    <link href="http://blog.siyelo.com/rails-deployment-audit"/>
    <updated>2012-07-13T16:13:00+02:00</updated>
    <id>http://blog.siyelo.com/rails-deployment-audit</id>
    <content type="html"><![CDATA[<p>We recently undertook an audit of a Rails deployment for a system developed by <a href="http://www.redcometlabs.com/">Red Comet Labs</a>. It is a Rails 3.2 application that integrates with 3 different storage systems (CouchDB, PostgreSQL and Redis). It is deployed using Capistrano and the server setup and management is done using Chef.</p>

<p>We shared our Rails Deployment experience with Red Comet Labs, and in this article we'll discuss a checklist of some <a href="http://www.jedi.be/blog/2010/02/12/what-is-this-devops-thing-anyway/">devops</a> practices and tools we are familiar with.</p>

<h2>Extract sensitive data</h2>

<p>All sensitive data like passwords, API keys &amp; tokens that are in the application are extracted as environment variables outside of the source code repository. We are using <a href="https://github.com/sstephenson/rbenv">rbevn</a>  for managing rubies, there is a nice plugin for setting up environment variables<a href="https://github.com/sstephenson/rbenv-vars">rbenv-vars</a>.</p>

<h2>Continuous Integration &amp; Deployment</h2>

<p>There are many great open source and commercial tools out there for <a href="https://www.ruby-toolbox.com/categories/continuous_integration">Continuous Integration</a>. We are using <a href="http://jenkins-ci.org/">Jenkins CI</a>  to run our test suite and handle Continuous Deployment (if the tests are green) for our staging branch. For production releases, we suggest doing releases manually at a scheduled time with the whole team ready and available.</p>

<h2>Deployment tools</h2>

<p>If you need more advanced tool for doing the deploy, <a href="https://github.com/capistrano/capistrano">Capistrano</a>  is the definitely the tool to go with. However, if you want something more light-weight you can try <a href="https://github.com/brentd/gitploy">gitploy</a>  (bare minimum, git-based tool for deployment). Alternatively, check out another tool from this <a href="https://www.ruby-toolbox.com/categories/deployment_automation">list</a>.</p>

<h2>Deployment Documentation</h2>

<p>Document server setup and everything about the deployment process. It may seem tedious now but in the long-run it will help because setups are easily forgetten and the person who initially setup the server is not always on hand to assist. By using an automation tool like <a href="http://wiki.opscode.com/display/chef/">Chef</a> or <a href="http://puppetlabs.com/">Puppet</a>  you are kind of documenting things on the fly.</p>

<h2>Server security</h2>

<p>Don't use your root user when you access your server - it's the simplest way to prevent accidentally breaking things. Create another user that can execute superuser commands using sudo. Use this non-root user all the time. You should use SSH key authentication to protect your server against brute-force password cracking attacks. Furthermore, you should disable SSH password authentication and the ability to login as root. Read more on this in Linode's guide on how to <a href="http://library.linode.com/securing-your-server">secure your server</a>.</p>

<h2>Start clean on boot</h2>

<p>All the services that are being used by the application need to start cleanly when the server boots up - there should be no need for manual intervention. If you are deploying to Ubuntu, <a href="http://manpages.ubuntu.com/manpages/precise/man8/update-rc.d.8.html">update-rc.d</a>  can be used for init.d processes. And, for the application Procfile-based processes you can use the <a href="https://github.com/ddollar/foreman">foreman gem</a>  and there is an easy <a href="http://michaelvanrooijen.com/articles/2011/06/08-managing-and-monitoring-your-ruby-application-with-foreman-and-upstart/">export to upstart</a>  for monitoring and boot start up setup.</p>

<h2>Log files</h2>

<p>Prevent log files from growing to the point where you don't have any space left on disc device by using <a href="http://www.nullislove.com/2007/09/10/rotating-rails-log-files/">logrotate</a>. Analyze request log of your Rails application to produce a performance report with <a href="https://github.com/wvanbergen/request-log-analyzer">request-log-analyzer</a>.</p>

<h2>Cron jobs</h2>

<p>Whether it's a backup script or background task that needs to be run as a job, it's a good idea to have documentation on it within the application. Cron's scheduling format is often difficult to read so we suggest using the <a href="https://github.com/javan/whenever/">whenever gem</a>  to make it more readable.</p>

<h2>Backups</h2>

<p>For both database &amp; uploaded content (like images and documents) we need to have regular backups distributed in different physical or cloud locations, <a href="https://github.com/meskyanichi/backup">backup gem</a> is very handy tool for that.</p>

<h2>Failover</h2>

<p>If server crashes, can you fail over to another server? How much time do you need for that operation and have you tested the procedure before it actually happens? Hosting services offer daily/weekly/monthly <a href="http://www.linode.com/backups/">node backups</a> but the procedure need to be tested before there is a need for doing that.</p>

<h2>External monitoring tools</h2>

<p>Service like <a href="http://www.pingdom.com/">Pingdom</a> or <a href="http://www.alertra.com/">Alerta</a> are interesting for monitoring server uptime and performance and they can send email, text and twitter alerts when the server is not working.</p>

<h2>Notifications for Exceptions</h2>

<p>Setup exception notifications to receive email notifications when application crashes. You can use <a href="https://github.com/smartinez87/exception_notification">exception_notification gem</a> or some paid service like <a href="http://airbrake.io/">Airbrake</a> or <a href="http://www.exceptional.io/">Exceptional</a>.</p>

<h2>Process monitoring tools</h2>

<p>Monitor your DB server, web server &amp; background processes and restart them if they consume too much memory. Tools like <a href="http://upstart.ubuntu.com/">Upstart</a>, <a href="https://github.com/arya/bluepill">Bluepill</a>, <a href="http://pathfindersoftware.com/2010/09/monitoring-rails-processes-apache-passenger-delayed_job-using-god-and-capistrano/">God</a> and <a href="http://viktorpetersson.com/2010/07/09/setting-up-monit-to-monitor-apache-and-postgresql-on-ubuntu/">Monit</a> are useful.</p>

<h2>Server performance</h2>

<p>Monitor server performance with <a href="http://library.linode.com/linux-tools/common-commands/vmstat">vmstat</a> or some 3rd party tool like <a href="https://scoutapp.com/">scoutapp</a>.</p>

<h2>Application performance</h2>

<p>Monitor your application performance, uptime, slow DB queries, background tasks with <a href="http://newrelic.com/">New Relic</a>. They also have <a href="http://newrelic.com/features/availability-monitoring">Availability monitoring</a> if you don't want to use other service for checking that your server is up and running.</p>

<p>The list is long, but it takes lots of patience in understanding the software business and delivering great software.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Redis in the NoSQL ecosystem]]></title>
    <link href="http://blog.siyelo.com/redis-in-the-nosql-ecosystem"/>
    <updated>2011-12-28T23:01:00+02:00</updated>
    <id>http://blog.siyelo.com/redis-in-the-nosql-ecosystem</id>
    <content type="html"><![CDATA[<p>Redis (<strong>RE</strong>mote <strong>D</strong>Ictionary <strong>S</strong>erver) is key-value in-memory database storage that also supports disk storage for persistence. It supports several <a href="http://redis.io/topics/data-types-intro">data types</a>: Strings, Hashes, Lists, Sets and Sorted Sets; implements <a href="http://redis.io/topics/pubsub">publish/subscribe</a> messaging paradigm and has <a href="http://redis.io/topics/transactions">transactions</a>.</p>

<p>All these different options place Redis in the NoSQL ecosystem somewhere between simple caching systems like memcache and feature-heavy document databases like MongoDB and CouchDB. The question is: when do you pick Redis over other NoSQL systems?</p>

<h3>Give us some ACID</h3>

<p>Before going into the use-cases, let's say one more important thing about Redis. Redis is single threaded which allows it to be <a href="http://en.wikipedia.org/wiki/ACID">ACID compliant</a> (Atomicity, Consistency, Isolation and Durability). Other <a href="http://nosql-database.org/">NoSQL databases</a> generally don't provide ACID compliance, or they provide it partially. By default Redis trades some durability in return for speed (default <strong>fsync()</strong> is set to <strong>everysec</strong> which means it will save data to disk every second). But, because Redis is very configurable, you can change how many times it will fsync() the data on disk by using the <strong>appendfsync</strong> command (you can use <strong>appendfsync always</strong> and system will fsync data after every write - it's slow but safest!).</p>

<h3>When to use Redis?</h3>

<p>In your production environment you don't need to switch to Redis. You can just <a href="http://antirez.com/post/take-advantage-of-redis-adding-it-to-your-stack.html">use it for the new things</a> you are implementing. Always pick right tool for the job. For stable, predictable and relational data pick relational database. For temporary, highly dynamic data pick NoSQL database; schema changes can be a big problem and can take forever in big relational databases.</p>

<p>If you have a highly dynamic data that changes often, storage tends to grow quickly and further involves schema adjusting to store them, then Redis can be a potential good choice.</p>

<p>If you need a more featured document oriented database that allows you to perform <strong>range queries</strong>, <strong>regular expression searches</strong>, <strong>indexing</strong>, and <strong>MapReduce</strong> you should check <strong>MongoDB</strong>, <strong>CouchDB</strong> or similar. If you need a simple <strong>caching</strong> with better expiration algorhitms than Redis has then you should check <strong>memcache</strong>.</p>

<h3>Redis Use-Cases</h3>

<ul>
<li>Access Logger: When you need to log different activities, Redis is a good solution. Because Redis has to keep all stored objects in memory, don't forget to archive data to relational/document database because it can grow quickly after some time.</li>
<li>Counting Downloads: <a href="https://github.com/rubygems/rubygems.org">Rubygems</a> uses Redis for counting downloads of gems. See how it's implemented in the <a href="https://github.com/rubygems/rubygems.org/blob/master/app/models/download.rb">Download</a> model.</li>
<li>High Score tables: Redis supports data type functions that can be very <a href="http://blog.agoragames.com/blog/2011/01/01/creating-high-score-tables-leaderboards-using-redis/">handy</a>.</li>
<li>Who's Online: Use Redis to implement <a href="http://www.lukemelia.com/blog/archives/2010/01/17/redis-in-practice-whos-online/">who is online</a> logic in your application.</li>
<li>Caching: Finding followings, followers or similar is very expensive operation in relational databases, use Redis to cache these data.</li>
<li>Queues: <a href="https://github.com/defunkt/resque">Resque</a> is a Redis-backed Ruby library for creating background jobs, placing them on multiple queues, and processing them later.</li>
<li>Live debugging: You need to do live debugging or roll out new features for production testing for specific users only - <a href="https://github.com/jamesgolick/rollout">Rollout</a> gem does exactly that.</li>
<li>HN style social news site written in Ruby/Sinatra/Redis/jQuery - <a href="https://github.com/antirez/lamernews">lamernews</a>.</li>
</ul>


<h3>Redis console</h3>

<p>You can use redis-cli to connect to a local or remote Redis server and call com-mands. Here is an example (first connect to the server using: redis-cli -p 6379):</p>

<h3>Redis from Ruby</h3>

<p>Here is an example using Ruby to execute commands on Redis server. You need to install <a href="https://github.com/ezmobius/redis-rb">redis gem</a> by executing<em>gem install redis</em>first.</p>

<p>Learn more about Redis <a href="http://redis.io/commands">commands</a> and give some speed to your web applications for free.</p>

<h3>Real world Redis example</h3>

<p>At the end, lets show a real world example how Redis is used in <a href="http://rubygems.org/">Rubygems</a> for caching gem downloads count. For keeping the code snippet short some code is ommited and/or simplified.</p>

<p>First, in the initializer a new redis object as a global variable <strong>$redis</strong> is instantiated. This object is used in Download model for updating the downloads count for a gem with <strong>self.incr(name)</strong> method and reading the downloads count for a gem with <strong>self.for_rubygem(name)</strong> method. Rubygems is using Sinatra application <strong>Hostess</strong> to speed up gem downloads. Sinatra application is registered as a  middleware in the application.rb config file. This application  defines <strong>get "/gems/*.gem"</strong> route which triggers the downloads count to be updated in the Redis database.</p>

<p>Rubygems is doing more download stats like: total downloads, downloads per gem, downloads for a specific gem version, etc. Check out the source code at <a href="https://github.com/rubygems/rubygems.org">Github</a> for more details.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Siyelos' git workflow]]></title>
    <link href="http://blog.siyelo.com/siyelos-git-workflow"/>
    <updated>2011-12-12T11:53:00+02:00</updated>
    <id>http://blog.siyelo.com/siyelos-git-workflow</id>
    <content type="html"><![CDATA[<p>Here at Siyelo we have a rather robust flow that we feel works quite well. This didn't come easily. It took lots of experimentation until we found out what exactly works for us. In this post I’m going to give a brief outline of how we work: </p>

<h3>Named Branches</h3>

<p>We rarely work on dev/master. Almost every feature we work on will get it’s own branch. Each branch will be pushed up to github in their own namepace (to prevent cluttering).</p>

<h3>Pull Requests</h3>

<p>When a branch is ready to be merged into dev we like to squash all the commits in that branch. This makes it easier for people reviewing the branch to get an overview of what is being done, it also makes for a cleaner git log.</p>

<p>We do, however, avoid squashing commits in the even changes are requested after the branch has been reviewed. We find this helps with the review process as it is easier for the reviewers to digest.</p>

<h3>Why pull requests?</h3>

<p>Pull requests serve 2 functions:</p>

<p>Firstly they give a very transparent overview of what is being worked on and what is ready to be merged and deployed.</p>

<p>This is also a great way to have your code peer reviewed. Github allows collaborators to comment directly on a line of code or on an entire commit or feature.</p>

<h3>Merging</h3>

<p>Once a branch has been given the go-ahead and the CI passes, one of the reviewers will merge the branch into dev. This is partly so there is a shared responsibility of the code in the repository and so there is always more than one person who understands that feature.</p>

<h3>Deploying</h3>

<p>Once merged in, the branch is immediately deployed to staging.</p>

<p>Deploying immediately will reduce big merges (merges will be easier) and we are able to gain visibility of bugs as they are introduced.  It also gives us more time to locate possible defects, if any.</p>

<p>If you're looking for something more specific, don't hesitate to ask :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Remote pair-programming with Screen]]></title>
    <link href="http://blog.siyelo.com/remote-pair-programming-with-screen"/>
    <updated>2011-11-03T10:37:00+02:00</updated>
    <id>http://blog.siyelo.com/remote-pair-programming-with-screen</id>
    <content type="html"><![CDATA[<p>At Siyelo we have 2 distributed teams, one in Cape Town and another one in Skopje. Naturally, we had to figure out how to do remote pair programming between the two offices. There are different available options for remote pair-programming (a great summary post available <a href="http://evan.tiggerpalace.com/articles/2011/10/17/some-people-call-me-the-remote-pairing-guy-/">here</a>).</p>

<p>In the past, we often used Skype for screen sharing, but the problems with Skype are:</p>

<ul>
<li>you don't have control over the other screen</li>
<li>you cannot have both screen sharing and video</li>
<li>bandwidth of the internet connection sometimes can be a problem</li>
<li>it's not a tool for pair programming</li>
</ul>


<p>Recently we have been experimenting with Google+ hangouts and although it has the same limitations, we prefer it over Skype for audio/video communication. But, what we really want from a remote pair-programming tool is the ability to do real time code collaboration.</p>

<p>The solution: <a href="http://www.gnu.org/s/screen/">screen</a>. Screen can have many useful scenarios, but here I will focus on following two:</p>

<ul>
<li>read only - useful as a screen sharing tool by hosting read only screen session</li>
<li>permissive - useful as a real time code collaboration tool</li>
</ul>


<p>Here is how to setup screen for both scenarios. Note: A downside of a tool like Screen is that everyone needs to learn an editor that runs in terminal. Luckily we all like vim.</p>

<p>First we need to install SSH server because all communication will happen over secure channel:</p>

<p><code>bash
sudo apt-get install ssh
</code></p>

<p>For the read only scenario, we need to setup guest user account on the host machine. For security reasons we will create a read-only account with <a href="http://man.he.net/man1/rbash">rbash</a> (<a href="http://www.cyberciti.biz/faq/restrict-linux-users-to-their-home-directories-only/">restricted</a> bash) shell which will be used by the programmer we want to pair with to ssh into the host  machine we control and join the screen session.</p>

<p><code>bash
sudo useradd -s /bin/rbash guest
sudo passwd guest
sudo mkdir /home/guest
</code></p>

<p>Next we need to setup the guest shell.profile. Add the following to /home/guest/.profile</p>

<p><code>bash
trap "" 2 3 19 # stop user getting to shell
clear
echo "Welcome to pair-programming session"
echo -n "Press Enter to continue..." &amp;&amp; read
screen -x dalibor/pairprog
exit
</code></p>

<p>Here as you can notice "screen -x dalibor/pairprog" automatically will join the session named "pairprog" that is started by "dalibor" user on "guest" user login.</p>

<p>Next we need to install screen on the host machine (if it's not already installed).</p>

<p><code>bash
sudo apt-get install screen
</code></p>

<p>For security reasons, screen by default is installed so that other users within the system can not attach to screen session (error you will get is: "Must run suid root for multiuser support."). To allow multi user setup you need to execute following (you might need to change the path if screen is installed in /usr/bin/screen for example):</p>

<p><code>bash
sudo chmod +s /usr/bin/screen
sudo chmod 755 /var/run/screen
</code></p>

<p>Then you need to add the following screen config in ~/.screenrc file</p>

<p>``` bash
hardstatus on
hardstatus alwayslastline
startup_message off
termcapinfo xterm ti@:te@
hardstatus string "%{= kG}%-w%{.rW}%n %t%{-}%+w %=%{..G} %H %{..Y} %m/%d %C%a "
screen -t bash1 1</p>

<h1>multiuser setup</h1>

<p>multiuser on
aclchg guest -wx "#,?"
aclchg guest +x "colon,wall,detach"
```</p>

<p>Most important lines are "multiuser on" which allows multiuser access in the screen session and "aclchg" command which removes all write and execute permissions for all windows (#) and all commands (?) for user guest. With this setup, host can do anything and guest can just watch the screen or message by using Ctrl-a: wall "hi there".</p>

<p>Finally, communication goes like this: screen session is started by host with:</p>

<p><code>bash
screen -S pairprog
</code></p>

<p>Guest SSH to the host machine and automatically joins the screen session:</p>

<p><code>bash
ssh guest@host
</code></p>

<p>Then they can interact in the same terminal. More on the screen commands <a href="http://aperiodic.net/screen/multiuser">here</a>.</p>

<p>If you trust the user you can add full permission with "acladd"  command, and usually it's to be done on a shared server. Say we have user1 and  user2 logged in on shared server via SSH, user1 has added user2 in  the ~/.screenrc file.</p>

<p><code>bash
multiuser on
acladd user2
</code></p>

<p>And is starting pairprog screen session with:</p>

<p><code>bash
screen -S pairprog
</code></p>

<p>Then user2 can join that session with:</p>

<p><code>bash
screen -x user1/pairprog
</code></p>

<p>More info on screen command here in this <a href="http://aperiodic.net/screen/quick_reference">screen reference</a>. Basic commands are:</p>

<p><code>bash
Ctrl-a d # detach screen window
Ctrl-a Ctrl-a # flip-flop between two windows
screen -r # re-attach screen window
</code></p>
]]></content>
  </entry>
  
</feed>
