<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Open-Source | Siyelo]]></title>
  <link href="http://blog.siyelo.com/blog/categories/open-source/atom.xml" rel="self"/>
  <link href="http://blog.siyelo.com/"/>
  <updated>2012-09-19T09:38:04+02:00</updated>
  <id>http://blog.siyelo.com/</id>
  <author>
    <name><![CDATA[Siyelo]]></name>
    <email><![CDATA[support@siyelo.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Scratching an itch]]></title>
    <link href="http://blog.siyelo.com/scratching-an-itch"/>
    <updated>2012-09-07T18:00:00+02:00</updated>
    <id>http://blog.siyelo.com/scratching-an-itch</id>
    <content type="html"><![CDATA[<p>This week we released a very simple gem called <a href="https://rubygems.org/gems/should_clean">ShouldClean</a>. ShouldClean is a tool to help us convert RSpec test descriptions from a pile of should (it 'should do this...', it 'should do that...') into a cleaner and simpler imperative style (it 'does this...', it 'does that...').  </p>

<p>The gem works by running through a specified directory and changing the offending descriptions within any spec files it finds. ShouldClean will remove the word 'should' and will conjugate the verb to its singular 3rd person, present indicative form (huh?). For example: </p>

<p><code>ruby
it "should be true"          #=&gt; it "is true"
it "should action something" #=&gt; it "actions something"
it "should push something"   #=&gt; it "pushes something"
it "should by default be 1"  #=&gt; it "by default is 1"
</code></p>

<p>Are a few extra 'shoulds' really that big of deal? Probably not - it really boils down to a matter of preference.  For us, running this tool on projects with large test suites helps:</p>

<ol>
<li>make the tests more readable;</li>
<li>it reduces unneccessary duplication in the spec files and the test output;</li>
<li>An added benefit is that the test suite has a mood of certainty about it - reading the tests tells you what the code does, not what it should do when everything falls into place. </li>
</ol>


<p>ShouldClean is just a simple, fun project we undertook to make the code we look at everyday, slightly better.  Hopefully you can find a use for it too - remember, pull requests are always welcome (<a href="http://www.github.com/siyelo/should_clean">http://www.github.com/siyelo/should_clean</a>).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Handy rake tasks for Heroku]]></title>
    <link href="http://blog.siyelo.com/handy-rake-tasks-for-heroku"/>
    <updated>2010-06-18T10:42:07+02:00</updated>
    <id>http://blog.siyelo.com/handy-rake-tasks-for-heroku</id>
    <content type="html"><![CDATA[<p>We've been using a standalone rake task to generate the .gems for our Heroku apps. Recently Heroku raised the bar by making you specify the rails version too in this file (gah). So all your 2.3.5 or lower full redeploys will start breaking without this line in .gems.</p>

<p>Theres some great gists and blogposts floating around there showing you how to generate .gems, but who wants to manage individual rake tasks across projects? Not me. A little bit of hunting and I found a nice plugin ‘heroku_san’ by Elijah Miller with several cool Heroku rake tasks, including one to generate the .gems file. </p>

<p>Plugins are pants though, so I've updated heroku_san to a gem now too. No more copying .rake tasks between projects!</p>

<p>Grab <a href="http://github.com/glennr/heroku_san">http://github.com/glennr/heroku_san</a> and <code>rake heroku:gems</code> til your hearts' content!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GitHub gem: A JSON text must at least contain two octets! (JSON::ParserError)]]></title>
    <link href="http://blog.siyelo.com/github-gem-a-json-text-must-at-least-contain-two-octets-jsonparsererror"/>
    <updated>2010-06-07T23:25:00+02:00</updated>
    <id>http://blog.siyelo.com/github-gem-a-json-text-must-at-least-contain-two-octets-jsonparsererror</id>
    <content type="html"><![CDATA[<p>Matt Jones and I came up with a fix for this error during Dr Nic's OSS tutorial at RailsConf '10.</p>

<p>Seems like GitHub is not returning correct JSON for the <code>http://github.com/#{user}/#{project}/network_meta</code> endpoint.</p>

<p>Fork our fix here:</p>

<p><a href="http://github.com/glennr/github-gem">http://github.com/glennr/github-gem</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fix for annoying bug in EmailSpec]]></title>
    <link href="http://blog.siyelo.com/fix-for-annoying-bug-in-emailspec"/>
    <updated>2009-12-15T14:33:00+01:00</updated>
    <id>http://blog.siyelo.com/fix-for-annoying-bug-in-emailspec</id>
    <content type="html"><![CDATA[<p>EmailSpec with Cucumber is a great combo. How else could you get such nice BDD syntax such as:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Scenario</span> <span class="no">Outline</span><span class="p">:</span> <span class="no">Register</span> <span class="kp">new</span> <span class="n">user</span>
</span><span class='line'><span class="no">Given</span> <span class="n">I</span> <span class="n">am</span> <span class="n">on</span> <span class="n">the</span> <span class="n">signup</span> <span class="n">page</span>
</span><span class='line'><span class="no">And</span> <span class="n">I</span> <span class="n">fill</span> <span class="k">in</span> <span class="s2">&quot;Email&quot;</span> <span class="n">with</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'><span class="no">And</span> <span class="n">I</span> <span class="n">fill</span> <span class="k">in</span> <span class="s2">&quot;Password&quot;</span> <span class="n">with</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'><span class="no">And</span> <span class="n">I</span> <span class="n">press</span> <span class="s2">&quot;Create My Account&quot;</span>
</span><span class='line'><span class="no">Then</span> <span class="n">I</span> <span class="n">should</span>
</span><span class='line'><span class="no">And</span> <span class="n">I</span> <span class="n">should</span> <span class="n">receive</span> <span class="n">an</span> <span class="n">email</span>
</span><span class='line'><span class="no">When</span> <span class="n">I</span> <span class="nb">open</span> <span class="n">the</span> <span class="n">email</span>
</span><span class='line'><span class="no">Then</span> <span class="n">I</span> <span class="n">should</span> <span class="n">see</span> <span class="s2">&quot;Please activate your new account&quot;</span> <span class="k">in</span> <span class="n">the</span> <span class="n">subject</span>
</span><span class='line'><span class="no">When</span> <span class="n">I</span> <span class="n">click</span> <span class="n">the</span> <span class="n">first</span> <span class="n">link</span> <span class="k">in</span> <span class="n">the</span> <span class="n">email</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>And if you happen to be using EmailSpec 0.3.5 and you're getting an error like this, I may have a solution for you:</p>

<p><code>bash
You have a nil object when you didn't expect it!
You might have expected an instance of Array.
The error occurred while evaluating nil.include? (NoMethodError)
/Users/glennroberts/.gem/ruby/1.8/gems/glennr-email_spec-0.3.5/lib/email_spec/deliveries.rb:45:in `mailbox_for'
/Users/glennroberts/.gem/ruby/1.8/gems/glennr-email_spec-0.3.5/lib/email_spec/deliveries.rb:45:in `select'
/Users/glennroberts/.gem/ruby/1.8/gems/glennr-email_spec-0.3.5/lib/email_spec/deliveries.rb:45:in `mailbox_for'
/Users/glennroberts/.gem/ruby/1.8/gems/glennr-email_spec-0.3.5/lib/email_spec/helpers.rb:138:in `mailbox_for'
/Users/glennroberts/.gem/ruby/1.8/gems/glennr-email_spec-0.3.5/lib/email_spec/helpers.rb:48:in `unread_emails_for'
./features/step_definitions/email_steps.rb:52
</code></p>

<p><code>bash
gem install glennr-email-spec
</code></p>

<p><em><em>or via GitHub</em> <a href="http://github.com/glennr/email-spec">http://github.com/glennr/email-spec</a></em></p>

<p>If you're reading this Mr Mabey, please include in the next email-spec patch :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Announcing Fuselage - Get your Rails project off to a flying start!]]></title>
    <link href="http://blog.siyelo.com/announcing-fuselage-get-your-rails-project-off-to-a-flying-start"/>
    <updated>2009-11-04T10:08:00+01:00</updated>
    <id>http://blog.siyelo.com/announcing-fuselage-get-your-rails-project-off-to-a-flying-start</id>
    <content type="html"><![CDATA[<p>Fuselage takes all the hassle out of installing several popular gems/plugins manually, as well as tidying up the default setup that the "rails" command gives you.</p>

<p>What's different about Fuselage? A lot of the Rails templates out there at the moment are quite primitive - a bunch of commands &amp; files shoved in to a single file. Fuselage has a separate template for each gem/plugin, allowing you to specify all the relevant installs/commands/files/etc in one place. The goal here is to capture a lot of the setup logic that most Rails gems have in a single, reusable template.</p>

<p>Fuselage avoids asking a lot of questions, so if you want to customize your install, edit "template.rb" manually.</p>

<p>Usage is very simple. You can invoke it directly from your "rails -m" command with:</p>

<p><code>bash
rails app_name -m http://github.com/siyelo/fuselage/raw/master/template.rb
</code></p>

<p>(note this does a git clone of Fuselage for you automatically)</p>

<p>Or if you prefer, grab your own clone from <a href="http://github.com/siyelo/fuselage">http://github.com/siyelo/fuselage</a> and set the FUSELAGE_DIR environment variable.</p>

<p>Full feature list</p>

<p>Currently Fuselage includes the following;</p>

<p><strong>Rails</strong></p>

<ul>
<li>basic template for a clean a rails install</li>
<li>SCS</li>
<li>git</li>
</ul>


<p><strong>DB + Models</strong></p>

<ul>
<li>MySQL</li>
<li>authlogic</li>
<li>recaptcha</li>
<li>paperclip</li>
</ul>


<p><strong>Design/Layout</strong></p>

<ul>
<li>jQuery</li>
<li>haml</li>
<li>sass</li>
<li>compass + blueprint</li>
<li>formtastic</li>
<li>cufon</li>
<li>friendly_id</li>
</ul>


<p><strong>Controllers</strong></p>

<ul>
<li>make_resourceful</li>
<li>will_paginate</li>
</ul>


<p><strong>Testing</strong></p>

<ul>
<li>machinist</li>
<li>faker</li>
<li>cucumber</li>
<li>rspec</li>
<li>webrat</li>
<li>watchr - alternative to autotest</li>
</ul>


<p><strong>Search</strong></p>

<ul>
<li>thinking-sphinx</li>
</ul>


<p><strong>Security</strong></p>

<ul>
<li>tarantula</li>
</ul>


<p><strong>Metrics</strong></p>

<ul>
<li>metric_Fu</li>
</ul>


<p><strong>Production</strong></p>

<ul>
<li>passenger</li>
<li>capistrano</li>
<li>exception_notification</li>
</ul>


<p><strong>Extra templates included</strong></p>

<p>These templates are included, but not installed by default. Manually edit template.rb to include them.</p>

<ul>
<li>compass with 960 grid system</li>
<li>restful_authentication</li>
<li>forgery</li>
<li>asset_packager</li>
<li>whenever</li>
</ul>

]]></content>
  </entry>
  
</feed>
